{"ast":null,"code":"var _jsxFileName = \"/home/aram/Desktop/React-file/monsters-function/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\n/* \nusetState is simply the ability to encapsulate local state to a functional component\n And the way to use that for example is going to inspect on google write the following\n\nvar arr = [2, 4];\nvar [a, b] = arr;\n\na output = 2\nThat essentially what am doing by applying the useState\n\n## useEffect hook \n - impure functions \n*/\n\nimport CardList from './components/cards-list/cards-list.components';\nimport SearchBox from './components/search-box/search-box.components';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  console.log('render');\n  const [searchField, setSearchField] = useState(''); //[value, setValue]\n\n  const [monsters, setMonsters] = useState([]);\n  console.log('render'); // useEffect takes to properties the first is going to be a callFunction and the second is going\n  // an array of dependencies\n\n  useEffect(() => {\n    fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json()).then(users => setMonsters(users));\n  }, []);\n\n  const onSearchChange = event => {\n    const searchFieldString = event.target.value.toLowerCase();\n    this.setState(() => {\n      setSearchField(searchFieldString);\n    });\n    const filteredMonsters = monsters.filter(() => {\n      return monster.name.toLowerCase().includes(searchField);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"app-title\",\n      children: \"Monsters Rolodex\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(SearchBox, {\n      className: \"monsters-search-box\",\n      onChangeHandler: onSearchChange,\n      placeholder: \"search monsters\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(CardList, {\n      monsters: filteredMonsters\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}; // class App extends Component {\n//   constructor() {\n//     super();\n//     this.state = {\n//       monsters: [],\n//       searchField: '',\n//     };\n//   }\n//    // ComponentDidMount is method itself and its Mounts once the our app is loaded and it only reMount\n//    // completely once we did totally remove it from the DOM.\n//   componentDidMount() {\n//     console.log('componentDidMount')\n//     // Using the native fetch()\n//     fetch('https://jsonplaceholder.typicode.com/users')\n//     // Once we fetch this - this is going to be a promise. and promise is asynchronous in JavaScript\n//     .then((response) => response.json()) // Every .then will return a promise that resolves\n//     .then((users) => this.setState(() => {\n//         return {monsters: users}\n//     }\n//     ));\n//   }\n//   onSearchChange = (event) => {\n//     const searchField = event.target.value.toLowerCase();\n//     this.setState(() => {\n//       return { searchField }\n//     })\n//   }\n//   render() {\n//     // I did use the destructuring in order to make code much shorter since this what ES6 gives huge benefits in\n//     // making my code shorter \n//     const { monsters, searchField } = this.state;\n//     const { onSearchChange } = this;\n//     const filteredMonsters = monsters.filter((monster) => {\n//       return monster.name.toLowerCase().includes(searchField);\n//    });\n//     return(\n//       <div className=\"App\">\n//         <h1 className=\"app-title\">Monsters Rolodex</h1>\n//       <SearchBox\n//           className='monsters-search-box'\n//           onChangeHandler={onSearchChange}\n//           placeholder='search monsters'\n//         />\n//         <CardList monsters={filteredMonsters}/>\n//       </div>\n//     );\n//   }\n// }\n\n\n_s(App, \"UjjxsG3ZR57s8J4EOBTjfKpwr24=\");\n\n_c = App;\nexport default App;\n/*\nNow am going to start with the functionality of my app as I want to create a search box that's \nfilters whatever keyword is selected to look for what I did fetch from the API place holder\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","CardList","SearchBox","App","console","log","searchField","setSearchField","monsters","setMonsters","fetch","then","response","json","users","onSearchChange","event","searchFieldString","target","value","toLowerCase","setState","filteredMonsters","filter","monster","name","includes"],"sources":["/home/aram/Desktop/React-file/monsters-function/src/App.js"],"sourcesContent":["\nimport { useState, useEffect } from 'react'\n \n/* \nusetState is simply the ability to encapsulate local state to a functional component\n And the way to use that for example is going to inspect on google write the following\n\nvar arr = [2, 4];\nvar [a, b] = arr;\n\na output = 2\nThat essentially what am doing by applying the useState\n\n## useEffect hook \n - impure functions \n*/\n\nimport CardList from './components/cards-list/cards-list.components'\nimport SearchBox from './components/search-box/search-box.components'\nimport './App.css';\n\n\nconst App = () => {\n  console.log('render')\n  const [searchField, setSearchField] = useState(''); //[value, setValue]\n  const [monsters, setMonsters] = useState([]);\n  \n  console.log('render')\n\n  // useEffect takes to properties the first is going to be a callFunction and the second is going\n  // an array of dependencies\n  useEffect(() => {\n    fetch('https://jsonplaceholder.typicode.com/users')\n     .then((response) => response.json())\n     .then((users) => setMonsters(users))\n  }, [])\n\n\n\n\n\n  const onSearchChange = (event) => {\n     const searchFieldString = event.target.value.toLowerCase();\n     this.setState(() => {\n       setSearchField(searchFieldString);\n     })\n\n     const filteredMonsters = monsters.filter(() => {\n       return monster.name.toLowerCase().includes(searchField)\n     })\n  }\n\n  return(\n    <div className=\"App\">\n       <h1 className=\"app-title\">Monsters Rolodex</h1>\n\n       <SearchBox\n           className='monsters-search-box'\n           onChangeHandler={onSearchChange}\n           placeholder='search monsters'\n         />\n         <CardList monsters={filteredMonsters}/>\n    </div>\n    );\n  };\n\n\n// class App extends Component {\n//   constructor() {\n//     super();\n\n//     this.state = {\n//       monsters: [],\n//       searchField: '',\n//     };\n//   }\n//    // ComponentDidMount is method itself and its Mounts once the our app is loaded and it only reMount\n//    // completely once we did totally remove it from the DOM.\n//   componentDidMount() {\n//     console.log('componentDidMount')\n//     // Using the native fetch()\n//     fetch('https://jsonplaceholder.typicode.com/users')\n//     // Once we fetch this - this is going to be a promise. and promise is asynchronous in JavaScript\n//     .then((response) => response.json()) // Every .then will return a promise that resolves\n//     .then((users) => this.setState(() => {\n//         return {monsters: users}\n//     }\n//     ));\n//   }\n\n//   onSearchChange = (event) => {\n//     const searchField = event.target.value.toLowerCase();\n//     this.setState(() => {\n//       return { searchField }\n//     })\n//   }\n\n\n//   render() {\n    \n//     // I did use the destructuring in order to make code much shorter since this what ES6 gives huge benefits in\n//     // making my code shorter \n//     const { monsters, searchField } = this.state;\n//     const { onSearchChange } = this;\n\n//     const filteredMonsters = monsters.filter((monster) => {\n//       return monster.name.toLowerCase().includes(searchField);\n//    });\n\n//     return(\n//       <div className=\"App\">\n//         <h1 className=\"app-title\">Monsters Rolodex</h1>\n\n//       <SearchBox\n//           className='monsters-search-box'\n//           onChangeHandler={onSearchChange}\n//           placeholder='search monsters'\n//         />\n//         <CardList monsters={filteredMonsters}/>\n//       </div>\n//     );\n//   }\n// }\n\nexport default App;\n\n\n/*\nNow am going to start with the functionality of my app as I want to create a search box that's \nfilters whatever keyword is selected to look for what I did fetch from the API place holder\n*/\n"],"mappings":";;;AACA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOC,QAAP,MAAqB,+CAArB;AACA,OAAOC,SAAP,MAAsB,+CAAtB;AACA,OAAO,WAAP;;;AAGA,MAAMC,GAAG,GAAG,MAAM;EAAA;;EAChBC,OAAO,CAACC,GAAR,CAAY,QAAZ;EACA,MAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,CAAC,EAAD,CAA9C,CAFgB,CAEoC;;EACpD,MAAM,CAACS,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAC,EAAD,CAAxC;EAEAK,OAAO,CAACC,GAAR,CAAY,QAAZ,EALgB,CAOhB;EACA;;EACAL,SAAS,CAAC,MAAM;IACdU,KAAK,CAAC,4CAAD,CAAL,CACEC,IADF,CACQC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADrB,EAEEF,IAFF,CAEQG,KAAD,IAAWL,WAAW,CAACK,KAAD,CAF7B;EAGD,CAJQ,EAIN,EAJM,CAAT;;EAUA,MAAMC,cAAc,GAAIC,KAAD,IAAW;IAC/B,MAAMC,iBAAiB,GAAGD,KAAK,CAACE,MAAN,CAAaC,KAAb,CAAmBC,WAAnB,EAA1B;IACA,KAAKC,QAAL,CAAc,MAAM;MAClBd,cAAc,CAACU,iBAAD,CAAd;IACD,CAFD;IAIA,MAAMK,gBAAgB,GAAGd,QAAQ,CAACe,MAAT,CAAgB,MAAM;MAC7C,OAAOC,OAAO,CAACC,IAAR,CAAaL,WAAb,GAA2BM,QAA3B,CAAoCpB,WAApC,CAAP;IACD,CAFwB,CAAzB;EAGF,CATD;;EAWA,oBACE;IAAK,SAAS,EAAC,KAAf;IAAA,wBACG;MAAI,SAAS,EAAC,WAAd;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADH,eAGG,QAAC,SAAD;MACI,SAAS,EAAC,qBADd;MAEI,eAAe,EAAES,cAFrB;MAGI,WAAW,EAAC;IAHhB;MAAA;MAAA;MAAA;IAAA,QAHH,eAQK,QAAC,QAAD;MAAU,QAAQ,EAAEO;IAApB;MAAA;MAAA;MAAA;IAAA,QARL;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAYC,CA1CH,C,CA6CA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;GApGMnB,G;;KAAAA,G;AAsGN,eAAeA,GAAf;AAGA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}