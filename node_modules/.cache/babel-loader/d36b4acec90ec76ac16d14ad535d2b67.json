{"ast":null,"code":"var _jsxFileName = \"/home/aram/Desktop/React-file/monsters/src/App.js\";\nimport { Component } from 'react';\nimport CardList from './components/cards-list/cards-list.components';\nimport SearchBox from './components/search-box/search-box.components';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.onSearchChange = event => {\n      const searchField = event.target.value.toLowerCase();\n      this.setState(() => {\n        return {\n          searchField\n        };\n      });\n    };\n\n    this.state = {\n      monsters: [],\n      searchField: ''\n    };\n  } // ComponentDidMount is method itself and its Mounts once the our app is loaded and it only reMount\n  // completely once we did totally remove it from the DOM.\n\n\n  componentDidMount() {\n    console.log('componentDidMount'); // Using the native fetch()\n\n    fetch('https://jsonplaceholder.typicode.com/users') // Once we fetch this - this is going to be a promise. and promise is asynchronous in JavaScript\n    .then(response => response.json()) // Every .then will return a promise that resolves\n    .then(users => this.setState(() => {\n      return {\n        monsters: users\n      };\n    }));\n  }\n\n  render() {\n    // I did use the destructuring in order to make code much shorter since this what ES6 gives huge benefits in\n    // making my code shorter \n    const {\n      monsters,\n      searchField\n    } = this.state;\n    const {\n      onSearchChange\n    } = this.state;\n    const filteredMonsters = monsters.filter(monster => {\n      return monster.name.toLowerCase().includes(searchField);\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(SearchBox, {\n        className: \"search-box\",\n        onChangeHandler: onSearchChange,\n        placeholder: \"search monsters\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardList, {\n        monsters: filteredMonsters\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;\n/*\nNow am going to start with the functionality of my app as I want to create a search box that's \nfilters whatever keyword is selected to look for what I did fetch from the API place holder\n*/","map":{"version":3,"names":["Component","CardList","SearchBox","App","constructor","onSearchChange","event","searchField","target","value","toLowerCase","setState","state","monsters","componentDidMount","console","log","fetch","then","response","json","users","render","filteredMonsters","filter","monster","name","includes"],"sources":["/home/aram/Desktop/React-file/monsters/src/App.js"],"sourcesContent":["import { Component } from 'react';\n\nimport CardList from './components/cards-list/cards-list.components'\nimport SearchBox from './components/search-box/search-box.components'\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: '',\n    };\n  }\n   // ComponentDidMount is method itself and its Mounts once the our app is loaded and it only reMount\n   // completely once we did totally remove it from the DOM.\n  componentDidMount() {\n    console.log('componentDidMount')\n    // Using the native fetch()\n    fetch('https://jsonplaceholder.typicode.com/users')\n    // Once we fetch this - this is going to be a promise. and promise is asynchronous in JavaScript\n    .then((response) => response.json()) // Every .then will return a promise that resolves\n    .then((users) => this.setState(() => {\n        return {monsters: users}\n    }\n    ));\n  }\n\n  onSearchChange = (event) => {\n    const searchField = event.target.value.toLowerCase();\n    this.setState(() => {\n      return { searchField }\n    })\n  }\n\n\n  render() {\n    \n    // I did use the destructuring in order to make code much shorter since this what ES6 gives huge benefits in\n    // making my code shorter \n    const { monsters, searchField } = this.state;\n    const { onSearchChange } = this.state;\n\n    const filteredMonsters = monsters.filter((monster) => {\n      return monster.name.toLowerCase().includes(searchField);\n   });\n\n    return(\n      <div className=\"App\">\n        <SearchBox\n          className='search-box'\n          onChangeHandler={onSearchChange}\n          placeholder='search monsters'\n        />\n        <CardList monsters={filteredMonsters}/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n\n\n/*\nNow am going to start with the functionality of my app as I want to create a search box that's \nfilters whatever keyword is selected to look for what I did fetch from the API place holder\n*/\n"],"mappings":";AAAA,SAASA,SAAT,QAA0B,OAA1B;AAEA,OAAOC,QAAP,MAAqB,+CAArB;AACA,OAAOC,SAAP,MAAsB,+CAAtB;AACA,OAAO,WAAP;;;AAEA,MAAMC,GAAN,SAAkBH,SAAlB,CAA4B;EAC1BI,WAAW,GAAG;IACZ;;IADY,KAsBdC,cAtBc,GAsBIC,KAAD,IAAW;MAC1B,MAAMC,WAAW,GAAGD,KAAK,CAACE,MAAN,CAAaC,KAAb,CAAmBC,WAAnB,EAApB;MACA,KAAKC,QAAL,CAAc,MAAM;QAClB,OAAO;UAAEJ;QAAF,CAAP;MACD,CAFD;IAGD,CA3Ba;;IAGZ,KAAKK,KAAL,GAAa;MACXC,QAAQ,EAAE,EADC;MAEXN,WAAW,EAAE;IAFF,CAAb;EAID,CARyB,CASzB;EACA;;;EACDO,iBAAiB,GAAG;IAClBC,OAAO,CAACC,GAAR,CAAY,mBAAZ,EADkB,CAElB;;IACAC,KAAK,CAAC,4CAAD,CAAL,CACA;IADA,CAECC,IAFD,CAEOC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EAFpB,EAEqC;IAFrC,CAGCF,IAHD,CAGOG,KAAD,IAAW,KAAKV,QAAL,CAAc,MAAM;MACjC,OAAO;QAACE,QAAQ,EAAEQ;MAAX,CAAP;IACH,CAFgB,CAHjB;EAOD;;EAUDC,MAAM,GAAG;IAEP;IACA;IACA,MAAM;MAAET,QAAF;MAAYN;IAAZ,IAA4B,KAAKK,KAAvC;IACA,MAAM;MAAEP;IAAF,IAAqB,KAAKO,KAAhC;IAEA,MAAMW,gBAAgB,GAAGV,QAAQ,CAACW,MAAT,CAAiBC,OAAD,IAAa;MACpD,OAAOA,OAAO,CAACC,IAAR,CAAahB,WAAb,GAA2BiB,QAA3B,CAAoCpB,WAApC,CAAP;IACF,CAFyB,CAAzB;IAIA,oBACE;MAAK,SAAS,EAAC,KAAf;MAAA,wBACE,QAAC,SAAD;QACE,SAAS,EAAC,YADZ;QAEE,eAAe,EAAEF,cAFnB;QAGE,WAAW,EAAC;MAHd;QAAA;QAAA;QAAA;MAAA,QADF,eAME,QAAC,QAAD;QAAU,QAAQ,EAAEkB;MAApB;QAAA;QAAA;QAAA;MAAA,QANF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF;EAUD;;AApDyB;;AAuD5B,eAAepB,GAAf;AAGA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}