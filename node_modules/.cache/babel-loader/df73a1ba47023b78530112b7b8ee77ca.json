{"ast":null,"code":"var _jsxFileName = \"/home/aram/Desktop/React-file/monsters/src/App.js\";\nimport { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: []\n    };\n    console.log('constructor');\n  } // ComponentDidMount is method itself and its Mounts once the our app is loaded and it only reMount\n  // completely once we did totally remove it from the DOM.\n\n\n  componentDidMount() {\n    console.log('componentDidMount'); // Using the native fetch()\n\n    fetch('https://jsonplaceholder.typicode.com/users') // Once we fetch this - this is going to be a promise. and promise is asynchronous in JavaScript\n    .then(response => response.json()) // Every .then will return a promise that resolves\n    .then(users => this.setState(() => {\n      return {\n        monsters: users\n      };\n    }, () => {\n      console.log(this.state);\n    }));\n  }\n\n  render() {\n    console.log('Rending'); // Re-rending\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"Search-box\",\n        type: \"search\",\n        placeholder: \"Search here\",\n        onChange: event => {\n          console.log({\n            StartingArray: this.state.monsters\n          });\n          const searchString = event.target.value.toLowerCase();\n          const filteredMonsters = this.state.monsters.filter(monster => {\n            return monster.name.toLowerCase().includes(searchString);\n          });\n          this.setState(() => {\n            return {\n              monsters: filteredMonsters\n            };\n          }, () => {\n            console.log({\n              EndingArray: this.state.monsters\n            });\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 10\n      }, this), this.state.monsters.map(monster => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: monster.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 13\n          }, this)\n        }, monster.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 20\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;\n/*\nNow am going to start with the functionality of my app as I want to create a search box that's \nfilters whatever keyword is selected to look for what I did fetch from the API place holder\n*/","map":{"version":3,"names":["Component","logo","App","constructor","state","monsters","console","log","componentDidMount","fetch","then","response","json","users","setState","render","event","StartingArray","searchString","target","value","toLowerCase","filteredMonsters","filter","monster","name","includes","EndingArray","map","id"],"sources":["/home/aram/Desktop/React-file/monsters/src/App.js"],"sourcesContent":["import { Component } from 'react';\n\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n    };\n    console.log('constructor')\n  }\n   // ComponentDidMount is method itself and its Mounts once the our app is loaded and it only reMount\n   // completely once we did totally remove it from the DOM.\n  componentDidMount() {\n    console.log('componentDidMount')\n    // Using the native fetch()\n    fetch('https://jsonplaceholder.typicode.com/users')\n    // Once we fetch this - this is going to be a promise. and promise is asynchronous in JavaScript\n    .then((response) => response.json()) // Every .then will return a promise that resolves\n    .then((users) => this.setState(() => {\n        return {monsters: users}\n    },\n    () => {\n       console.log(this.state);\n      }\n    ));\n  }\n\n\n  render() {\n    console.log('Rending') // Re-rending\n    return(\n      <div className=\"App\">\n         <input className='Search-box' type='search' placeholder='Search here' onChange={(event) => {\n             console.log({ StartingArray: this.state.monsters});\n             const searchString = event.target.value.toLowerCase();\n             const filteredMonsters = this.state.monsters.filter((monster) => {\n                return monster.name.toLowerCase().includes(searchString);\n             });\n\n             this.setState(() => {\n               return { monsters: filteredMonsters }\n             }, () => {\n               console.log({ EndingArray: this.state.monsters });\n             })\n         }}/>\n         {this.state.monsters.map((monster) => {\n            return <div key={monster.id}>\n            <h1>{monster.name}</h1>\n            </div>;\n          })\n        }\n      </div>\n    )\n  }\n}\n\nexport default App;\n\n\n/*\nNow am going to start with the functionality of my app as I want to create a search box that's \nfilters whatever keyword is selected to look for what I did fetch from the API place holder\n*/\n"],"mappings":";AAAA,SAASA,SAAT,QAA0B,OAA1B;AAEA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAO,WAAP;;;AAEA,MAAMC,GAAN,SAAkBF,SAAlB,CAA4B;EAC1BG,WAAW,GAAG;IACZ;IAEA,KAAKC,KAAL,GAAa;MACXC,QAAQ,EAAE;IADC,CAAb;IAGAC,OAAO,CAACC,GAAR,CAAY,aAAZ;EACD,CARyB,CASzB;EACA;;;EACDC,iBAAiB,GAAG;IAClBF,OAAO,CAACC,GAAR,CAAY,mBAAZ,EADkB,CAElB;;IACAE,KAAK,CAAC,4CAAD,CAAL,CACA;IADA,CAECC,IAFD,CAEOC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EAFpB,EAEqC;IAFrC,CAGCF,IAHD,CAGOG,KAAD,IAAW,KAAKC,QAAL,CAAc,MAAM;MACjC,OAAO;QAACT,QAAQ,EAAEQ;MAAX,CAAP;IACH,CAFgB,EAGjB,MAAM;MACHP,OAAO,CAACC,GAAR,CAAY,KAAKH,KAAjB;IACA,CALc,CAHjB;EAUD;;EAGDW,MAAM,GAAG;IACPT,OAAO,CAACC,GAAR,CAAY,SAAZ,EADO,CACgB;;IACvB,oBACE;MAAK,SAAS,EAAC,KAAf;MAAA,wBACG;QAAO,SAAS,EAAC,YAAjB;QAA8B,IAAI,EAAC,QAAnC;QAA4C,WAAW,EAAC,aAAxD;QAAsE,QAAQ,EAAGS,KAAD,IAAW;UACvFV,OAAO,CAACC,GAAR,CAAY;YAAEU,aAAa,EAAE,KAAKb,KAAL,CAAWC;UAA5B,CAAZ;UACA,MAAMa,YAAY,GAAGF,KAAK,CAACG,MAAN,CAAaC,KAAb,CAAmBC,WAAnB,EAArB;UACA,MAAMC,gBAAgB,GAAG,KAAKlB,KAAL,CAAWC,QAAX,CAAoBkB,MAApB,CAA4BC,OAAD,IAAa;YAC9D,OAAOA,OAAO,CAACC,IAAR,CAAaJ,WAAb,GAA2BK,QAA3B,CAAoCR,YAApC,CAAP;UACF,CAFwB,CAAzB;UAIA,KAAKJ,QAAL,CAAc,MAAM;YAClB,OAAO;cAAET,QAAQ,EAAEiB;YAAZ,CAAP;UACD,CAFD,EAEG,MAAM;YACPhB,OAAO,CAACC,GAAR,CAAY;cAAEoB,WAAW,EAAE,KAAKvB,KAAL,CAAWC;YAA1B,CAAZ;UACD,CAJD;QAKH;MAZD;QAAA;QAAA;QAAA;MAAA,QADH,EAcI,KAAKD,KAAL,CAAWC,QAAX,CAAoBuB,GAApB,CAAyBJ,OAAD,IAAa;QACnC,oBAAO;UAAA,uBACP;YAAA,UAAKA,OAAO,CAACC;UAAb;YAAA;YAAA;YAAA;UAAA;QADO,GAAUD,OAAO,CAACK,EAAlB;UAAA;UAAA;UAAA;QAAA,QAAP;MAGD,CAJD,CAdJ;IAAA;MAAA;MAAA;MAAA;IAAA,QADF;EAuBD;;AApDyB;;AAuD5B,eAAe3B,GAAf;AAGA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}